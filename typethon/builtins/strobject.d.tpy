import collections
import strings
from codecs import Codec, CodecErrors


class str:
    def __new__(cls, object: object = '') -> str

    def isalnum(self) -> bool
    def isalpha(self) -> bool
    def isascii(self) -> bool
    def isdecimal(self) -> bool
    def isdigit(self) -> bool
    def isidentifier(self) -> bool
    def islower(self) -> bool
    def isnumeric(self) -> bool
    def isprintable(self) -> bool
    def isspace(self) -> bool
    def istitle(self) -> bool
    def isupper(self) -> bool

    def title(self) -> str
    def capitalize(self) -> str
    def upper(self) -> str
    def lower(self) -> str
    def casefold(self, width: int, fillchar: str = ' ') -> str
    def swapcase(self) -> str
    def count(self, sub: str) -> int
    def find(self, sub: str) -> int
    def rfind(self, sub: str) -> int
    def index(self, sub: str) -> int
    def rindex(self, sub: str) -> int
    def startswith(self, prefix: str) -> bool
    def endswith(self, suffix: str) -> bool
    def removeprefix(self, prefix: str) -> str
    def removesuffix(self, suffix: str) -> str
    def format(self, *args: object, **kwargs: object) -> str
    def format(self, mapping: collections.Mapping{str, object}) -> str
    def expandtabs(self, tabsize: int = 8) -> str
    def ljust(self, fillchar: str = ' ') -> str
    def rjust(self, width: int, fillchar: str = ' ') -> str
    def zfill(self, width: int) -> str
    def join(self, iterable: collections.Iterable{str}) -> str
    def translate(self, table: collections.Sequence{str}) -> str
    def replace(self, old: str, new: str, count: int = -1) -> str
    def strip(self, chars: str = strings.WHITESPACE) -> str
    def lstrip(self, chars: str = strings.WHITESPACE) -> str
    def rstrip(self, chars: str = strings.WHITESPACE) -> str
    def split(self, sep: str | None = None, maxsplit: int = -1) -> [str]
    def rsplit(self, sep: str | None = None, maxsplit: int = -1) -> [str]
    def splitlines(self, keepends: bool = True) -> [str]
    def partition(self, sep: str) -> (str, str, str)
    def rpartition(self, sep: str) -> (str, str, str)
    def encode(self, encoding: Codec = Codec.UTF_8, errors: CodecErrors.STRICT) -> bytes
