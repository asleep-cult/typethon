from types import Intable, Indexable, Truncable


class int:
    def __new__(cls, number: str | Intable | Indexable | Truncable = 0) -> int

    def __pos__(self) -> int
    def __neg__(self) -> int
    def __invert__(self) -> int

    def __add__(self, number: int | float) -> type{number}
    def __sub__(self, number: int | float) -> type{number}
    def __mult__(self, number: int | float) -> type{number}
    def __truediv__(self, number: int | float) -> float
    def __floordiv__(self, number: int | float) -> type{number}
    def __mod__(self, number: int | float) -> type{number}
    def __pow__(self, number: int | float) -> type{number}

    def __or__(self, number: int) -> int
    def __xor__(self, number: int) -> int
    def __and__(self, number: int) -> int
    def __lshift__(self, number: int) -> int
    def __rshift__(self, number: int) -> int

    def bit_length(self) -> int
    def bit_count(self) -> int
    def as_integer_ratio(self) -> (int, int)
